package com.bootcamp.controllers;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bootcamp.models.Books;
import com.bootcamp.repositories.BooksRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/book") // This means URL's start with /book (after
								// Application path)
public class BooksController extends WebMvcConfigurerAdapter {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private BooksRepository bookRepository;

	/*
	 * public @ResponseBody String addNewBook (@RequestParam String title
	 * , @RequestParam String isbn, @RequestParam String author,
	 * 
	 * @RequestParam String condition, @RequestParam int year, @RequestParam int
	 * count, @RequestParam float rating, @RequestParam String pic_url) {
	 * 
	 * 
	 */

	@GetMapping("/manage")
	public String showForm(@ModelAttribute("bookAddForm") Books bookAddForm,Model model) {
		bookAddForm.setYear(0);
		return "manage";
	}

	@PostMapping("/manage")
	public String addBook(@ModelAttribute("bookAddForm") @Valid Books bookAddForm, BindingResult bindingResult,
			@RequestParam(value = "title", required = false) String title,
			@RequestParam(value = "isbn", required = false) String isbn,
			@RequestParam(value = "author", required = false) String author,
			@RequestParam(value = "rating", required = false) Integer rating,
			@RequestParam(value = "year", required = false) Integer year,
			@RequestParam(value = "pic_url", required = false) String pic_url,Model model) {
			
		if (bindingResult.hasErrors()) {
			model.addAttribute("isSaved", false);
			return "manage";
		}
		// @ResponseBody means the returned String is the response, not a view
		// name
		// @RequestParam means it is a parameter from the GET or POST request

		Books book = new Books();

		book.setCondition("new");
		book.setIsbn(isbn);
		book.setRating(rating);
		book.setYear(year);
		book.setTitle(title);
		book.setAuthor(author);
		book.setPic_url(pic_url);
		bookRepository.save(book);
		model.addAttribute("isSaved", true);
		return "manage";
	}

	@GetMapping(path = "/delete")
	public @ResponseBody String deleteBook(@RequestParam String isbn) {

		// bookRepository.deleteByIsbn(isbn);

		return "deleted";

	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Books> getAllUsers() {
		// This returns a JSON or XML with the users
		return bookRepository.findAll();
	}

}
